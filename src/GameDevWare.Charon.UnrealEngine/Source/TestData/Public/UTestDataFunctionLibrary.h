
#pragma once
//
// The source code was generated by the Charon, GameDevWare, 2025
// License: MIT
//
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable All

#include "GameData/UGameDataDocument.h"
#include "GameData/FGameDataDocumentReference.h"
#include "GameData/FLocalizedText.h"
#include "GameData/EDocumentReferenceGetResult.h"
#include "UTestDataProjectSettings.h"
#include "UTestEntity.h"
#include "URecursiveEntity.h"
#include "UNumberTestEntity.h"
#include "UUniqueAttributeEntity.h"
#include "ETestEntityPickListField.h"
#include "ETestEntityMultiPickListField.h"
#include "ENumberTestEntityPickList8Bit.h"
#include "ENumberTestEntityPickList16Bit.h"
#include "ENumberTestEntityPickList32Bit.h"
#include "ENumberTestEntityPickList64Bit.h"
#include "ENumberTestEntityMultiPickList8Bit.h"
#include "ENumberTestEntityMultiPickList16Bit.h"
#include "ENumberTestEntityMultiPickList32Bit.h"
#include "ENumberTestEntityMultiPickList64Bit.h"
#include "EUniqueAttributeEntityPickListKey.h"
#include "EUniqueAttributeEntityMultiPickListKey.h"
#include "ERecursiveEntityId.h"
#include "ETestEntityId.h"
#include "EUniqueAttributeEntityId.h"
#include "EUniqueAttributeEntitySnakeCaseKey.h"
#include "EUniqueAttributeEntityCamelCaseKey.h"
#include "EUniqueAttributeEntityDromedaryCaseKey.h"
#include "EUniqueAttributeEntityTextKey.h"
#include "EUniqueAttributeEntityNumberKey.h"
#include "EUniqueAttributeEntityIntegerKey.h"
#include "EUniqueAttributeEntityTimeSpanKey.h"
#include "EUniqueAttributeEntityDateTimeKey.h"
#include "UTestEntityFormulaFieldFormula.h"

#include "UTestDataFunctionLibrary.generated.h"

/**
  * Extension functions for generate UTestData class.
  */
UCLASS()
class TESTDATA_API UTestDataFunctionLibrary : public UBlueprintFunctionLibrary
{
	GENERATED_BODY()

	/*
	 * Get UTestDataProjectSettings referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UTestDataProjectSettings* GetTestDataProjectSettings(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UTestDataProjectSettings* Document = Cast<UTestDataProjectSettings>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UTestEntity referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UTestEntity* GetTestEntity(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UTestEntity* Document = Cast<UTestEntity>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get URecursiveEntity referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static URecursiveEntity* GetRecursiveEntity(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		URecursiveEntity* Document = Cast<URecursiveEntity>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UNumberTestEntity referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UNumberTestEntity* GetNumberTestEntity(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UNumberTestEntity* Document = Cast<UNumberTestEntity>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UUniqueAttributeEntity referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UUniqueAttributeEntity* GetUniqueAttributeEntity(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UUniqueAttributeEntity* Document = Cast<UUniqueAttributeEntity>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
};
