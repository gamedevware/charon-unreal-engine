
#pragma once
//
// The source code was generated by the Charon, GameDevWare, 2025
// License: MIT
//
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable All

#include "Misc/TVariant.h"

/**
  * Enumeration based on int32. Used in Schemas: Monster.
  */
UENUM(BlueprintType)
enum class EMonsterType : uint8 {
	None = 0  UMETA(DisplayName = "None"),
	Human = 1  UMETA(DisplayName = "Human"),
	Beast = 2  UMETA(DisplayName = "Beast"),
	Unholy = 3  UMETA(DisplayName = "Unholy"),
	Eldritch = 4  UMETA(DisplayName = "Eldritch"),
	Corpse = 5  UMETA(DisplayName = "Corpse"),
	Carpentry = 6  UMETA(DisplayName = "Carpentry"),
	Crockery = 7  UMETA(DisplayName = "Crockery"),
	Ironwork = 8  UMETA(DisplayName = "Ironwork"),
	Thatchery = 9  UMETA(DisplayName = "Thatchery"),
	Cosmic = 10  UMETA(DisplayName = "Cosmic"),
};

/** Implements variant type traits for enumeration type. */
template<> struct TVariantTraits<EMonsterType>
{
	static constexpr EVariantTypes GetType() { return EVariantTypes::Enum; }
};
