
#pragma once
//
// The source code was generated by the Charon, GameDevWare, 2025
// License: MIT
//
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable All

#include "Misc/TVariant.h"

/**
  * Enumeration based on int32. Default Value: Food - 0, Flags, Used in Schemas: Curio.
  */
UENUM(BlueprintType, meta = (Bitflags, UseEnumValuesAsMaskValuesInEditor = "true"))
enum class ECurioType : uint8 {
		None = 0  UMETA(DisplayName = "None"),
		Reflective = 1  UMETA(DisplayName = "Reflective"),
		Worship = 2  UMETA(DisplayName = "Worship"),
		Knowledge = 4  UMETA(DisplayName = "Knowledge"),
		Haunted = 8  UMETA(DisplayName = "Haunted"),
		Scrounging = 16  UMETA(DisplayName = "Scrounging"),
		Fountain = 32  UMETA(DisplayName = "Fountain"),
		Torture = 64  UMETA(DisplayName = "Torture"),
		Treasure = 128  UMETA(DisplayName = "Treasure"),
		/* Unable to generated label - ECurioType.Body, because value - 256 is greater than UE max supported - 255 */
		/* Unable to generated label - ECurioType.Unholy, because value - 512 is greater than UE max supported - 255 */
		/* Unable to generated label - ECurioType.Drink, because value - 1024 is greater than UE max supported - 255 */
		/* Unable to generated label - ECurioType.Food, because value - 2048 is greater than UE max supported - 255 */
};
ENUM_CLASS_FLAGS(ECurioType);

/** Implements variant type traits for enumeration type. */
template<> struct TVariantTraits<ECurioType>
{
	static constexpr EVariantTypes GetType() { return EVariantTypes::Enum; }
};
