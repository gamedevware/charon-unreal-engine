
#pragma once
//
// The source code was generated by the Charon, GameDevWare, 2024
// License: MIT
//
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable All

#include "GameData/UGameDataDocument.h"
#include "GameData/FGameDataDocumentReference.h"
#include "GameData/FLocalizedText.h"
#include "GameData/EDocumentReferenceGetResult.h"
#include "URpgGameDataProjectSettings.h"
#include "UParameter.h"
#include "UParameterValue.h"
#include "UProvision.h"
#include "UHero.h"
#include "UItem.h"
#include "ULocation.h"
#include "UTrinket.h"
#include "UMonster.h"
#include "ULoot.h"
#include "UCombatEffect.h"
#include "UCurioCleansingOption.h"
#include "UCurio.h"
#include "UDisease.h"
#include "UQuirk.h"
#include "UCondition.h"
#include "UWeapon.h"
#include "UArmor.h"
#include "UItemWithCount.h"
#include "UStartingSet.h"
#include "EParameterId.h"
#include "EParameterValueKind.h"
#include "ELocationFlags.h"
#include "ETrinketRarity.h"
#include "EMonsterType.h"
#include "ELootType.h"
#include "EDurationUnit.h"
#include "ECurioType.h"
#include "ECurioPlacementRestictions.h"
#include "EConditionsId.h"
#include "ECurioId.h"
#include "EDiseaseId.h"
#include "EHeroId.h"
#include "EArmorId.h"
#include "EWeaponId.h"
#include "EItemId.h"
#include "ELocationId.h"
#include "EMonsterId.h"
#include "EProvisionId.h"
#include "EQuirkId.h"
#include "ETrinketId.h"
#include "UConditionsCheckFormula.h"

#include "URpgGameDataFunctionLibrary.generated.h"

/**
  * Extension functions for generate URpgGameData class.
  */
UCLASS()
class RPGGAMEDATA_API URpgGameDataFunctionLibrary : public UBlueprintFunctionLibrary
{
	GENERATED_BODY()

	/*
	 * Get URpgGameDataProjectSettings referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static URpgGameDataProjectSettings* GetRpgGameDataProjectSettings(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		URpgGameDataProjectSettings* Document = Cast<URpgGameDataProjectSettings>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UParameter referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UParameter* GetParameter(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UParameter* Document = Cast<UParameter>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UParameterValue referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UParameterValue* GetParameterValue(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UParameterValue* Document = Cast<UParameterValue>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UProvision referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UProvision* GetProvision(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UProvision* Document = Cast<UProvision>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UHero referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UHero* GetHero(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UHero* Document = Cast<UHero>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UItem referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UItem* GetItem(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UItem* Document = Cast<UItem>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get ULocation referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static ULocation* GetLocation(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		ULocation* Document = Cast<ULocation>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UTrinket referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UTrinket* GetTrinket(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UTrinket* Document = Cast<UTrinket>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UMonster referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UMonster* GetMonster(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UMonster* Document = Cast<UMonster>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get ULoot referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static ULoot* GetLoot(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		ULoot* Document = Cast<ULoot>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UCombatEffect referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UCombatEffect* GetCombatEffect(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UCombatEffect* Document = Cast<UCombatEffect>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UCurioCleansingOption referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UCurioCleansingOption* GetCurioCleansingOption(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UCurioCleansingOption* Document = Cast<UCurioCleansingOption>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UCurio referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UCurio* GetCurio(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UCurio* Document = Cast<UCurio>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UDisease referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UDisease* GetDisease(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UDisease* Document = Cast<UDisease>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UQuirk referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UQuirk* GetQuirk(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UQuirk* Document = Cast<UQuirk>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UCondition referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UCondition* GetCondition(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UCondition* Document = Cast<UCondition>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UWeapon referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UWeapon* GetWeapon(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UWeapon* Document = Cast<UWeapon>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UArmor referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UArmor* GetArmor(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UArmor* Document = Cast<UArmor>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UItemWithCount referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UItemWithCount* GetItemWithCount(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UItemWithCount* Document = Cast<UItemWithCount>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
	/*
	 * Get UStartingSet referenced in specified DocumentReference.
	 */
	UFUNCTION(BlueprintCallable, Meta = (ExpandEnumAsExecs = "Branches"))
	static UStartingSet* GetStartingSet(FGameDataDocumentReference DocumentReference, EDocumentReferenceGetResult& Branches)
	{
		UStartingSet* Document = Cast<UStartingSet>(DocumentReference.GetReferencedDocument());
		if (Document == nullptr)
		{
			Branches = EDocumentReferenceGetResult::NotFound;
		}
		else
		{
			Branches = EDocumentReferenceGetResult::Found;
		}
		return Document;
	}
};
