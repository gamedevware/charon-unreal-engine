
//
// The source code was generated by the Charon, GameDevWare, 2024
// License: MIT
//
//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All

#include "URpgGameData.h"
#include "URpgGameDataProjectSettings.h"
#include "UParameter.h"
#include "UParameterValue.h"
#include "UProvision.h"
#include "UHero.h"
#include "UItem.h"
#include "ULocation.h"
#include "UTrinket.h"
#include "UMonster.h"
#include "ULoot.h"
#include "UCombatEffect.h"
#include "UCurioCleansingOption.h"
#include "UCurio.h"
#include "UDisease.h"
#include "UQuirk.h"
#include "UCondition.h"
#include "UWeapon.h"
#include "UArmor.h"
#include "UItemWithCount.h"
#include "UStartingSet.h"
#include "UConditionsCheckFormula.h"

DEFINE_LOG_CATEGORY(LogURpgGameData);

void URpgGameData::Empty()
{
	for (const auto SubObject: GetRootDocuments())
	{
		SubObject->Rename(nullptr, GetTransientPackage(), 0); // detach sub-documents
	}

	LanguageSwitcher = nullptr;
	RootDocuments = nullptr;
	AllDocuments = nullptr;

	ChangeNumber = 0;
	RevisionHash.Empty();

	ProjectSettings = nullptr;
	AllProjectSettingsList.Empty();
	ProjectSettingsList.Empty();
	AllParameters.Empty();
	Parameters.Empty();
	AllParameterValues.Empty();
	ParameterValues.Empty();
	AllProvisions.Empty();
	Provisions.Empty();
	AllHeros.Empty();
	Heros.Empty();
	AllItems.Empty();
	Items.Empty();
	AllLocations.Empty();
	Locations.Empty();
	AllTrinkets.Empty();
	Trinkets.Empty();
	AllMonsters.Empty();
	Monsters.Empty();
	AllLoots.Empty();
	Loots.Empty();
	AllCombatEffects.Empty();
	CombatEffects.Empty();
	AllCurioCleansingOptions.Empty();
	CurioCleansingOptions.Empty();
	AllCurios.Empty();
	Curios.Empty();
	AllDiseases.Empty();
	Diseases.Empty();
	AllQuirks.Empty();
	Quirks.Empty();
	AllConditionsList.Empty();
	ConditionsList.Empty();
	AllWeapons.Empty();
	Weapons.Empty();
	AllArmors.Empty();
	Armors.Empty();
	AllItemWithCounts.Empty();
	ItemWithCounts.Empty();
	StartingSet = nullptr;
	AllStartingSets.Empty();
	StartingSets.Empty();

	SupportedLanguages.Empty();
}

bool URpgGameData::TryLoad(FArchive* const GameDataStream, EGameDataFormat Format)
{
	auto Options = FGameDataLoadOptions();
	Options.Format = Format;
	return TryLoad(GameDataStream, Options);
}
bool URpgGameData::TryLoad(FArchive* const GameDataStream, FGameDataLoadOptions Options)
{
	Empty(); // Reset current state

	SupportedLanguages.Add(TEXT("en-US"));

	if (LanguageSwitcher == nullptr)
	{
		LanguageSwitcher = NewObject<ULanguageSwitcher>(this);
	}
	LanguageSwitcher->CurrentLanguageId = TEXT("en-US");
	LanguageSwitcher->FallbackLanguageId = TEXT("en-US");
	LanguageSwitcher->PrimaryLanguageId = TEXT("en-US");

	auto GameDataReader = CreateReader(GameDataStream, Options);
	GameDataReader->ReadNext(); // initialize reader and move to first token

	if (Options.Patches.Num() > 0)
	{
		TSharedPtr<FJsonObject> GameDataDocument = nullptr;
		if (!GameDataReader->ReadObject(GameDataDocument, /* NextToken */  false))
		{
			GameDataDocument = nullptr;
			UE_LOG(LogURpgGameData, Error, TEXT("Failed to read Game Data from file. Probably file format is wrong or file is broken."));
			return false;
		}
		for (const auto GameDataPatchStream : Options.Patches)
		{
			const auto GameDataPatchReader = CreateReader(GameDataPatchStream, Options);
			GameDataPatchReader->ReadNext(); // initialize reader and move to first token

			TSharedPtr<FJsonObject> GameDataPatchDocument;
			if (!GameDataPatchReader->ReadObject(GameDataPatchDocument, /* NextToken */  false))
			{
				GameDataPatchDocument = nullptr;
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read Game Data patch from file. Probably file format is wrong or file is broken."));
				return false;
			}

			GameDataDocument = MergeGameData(GameDataDocument, GameDataPatchDocument);
		}

		if (GameDataDocument == nullptr)
		{
			UE_LOG(LogURpgGameData, Error, TEXT("Failed to apply Game Data patch."));
			return false;
		}

		GameDataReader = FGameDataReaderFactory::CreateJsonObjectReader(GameDataDocument);
		GameDataReader->ReadNext(); // initialize reader and move to first token
	}

	if (!ReadGameData(GameDataReader))
	{
		UE_LOG(LogURpgGameData, Error, TEXT("Failed to parse Game Data from file."));
		return false;
	}

	FindAllDocuments();
	UpdateProjectSettings();
	UpdateSettings();

	return true;
}

void URpgGameData::UpdateProjectSettings()
{
	const auto _ProjectSettings = GetOne(this->ProjectSettingsList);
	if (_ProjectSettings == nullptr)
	{
		return;
	}
	GameDataVersion = _ProjectSettings->Version;

	const auto _ProjectSettingsLanguages = _ProjectSettings->Languages;
	if (_ProjectSettingsLanguages.IsEmpty())
	{
		return;
	}

	SupportedLanguages.Empty();

	ParseLanguageList(_ProjectSettingsLanguages, SupportedLanguages);

	const auto _ProjectSettingsPrimaryLanguage = _ProjectSettings->PrimaryLanguage;
	if (!_ProjectSettingsPrimaryLanguage.IsEmpty())
	{
		LanguageSwitcher->PrimaryLanguageId = _ProjectSettingsPrimaryLanguage;
	}
	else if (SupportedLanguages.Num() > 0)
	{
		LanguageSwitcher->PrimaryLanguageId = SupportedLanguages[0];
	}
	else
	{
		LanguageSwitcher->PrimaryLanguageId = TEXT("en-US");
	}

	LanguageSwitcher->CurrentLanguageId = LanguageSwitcher->FallbackLanguageId = LanguageSwitcher->PrimaryLanguageId;
	if (!SupportedLanguages.Contains(LanguageSwitcher->PrimaryLanguageId))
	{
		SupportedLanguages.Add(LanguageSwitcher->PrimaryLanguageId);
	}
	SupportedLanguages.Sort();
}

void URpgGameData::ParseLanguageList(const FString& InLanguages, TArray<FString>& OutLanguageList)
{
	auto Languages = FString(InLanguages);
	Languages.ReplaceCharInline(TEXT(','), TEXT(';'));
	Languages.ReplaceCharInline(TEXT('|'), TEXT(';'));
	Languages.ReplaceCharInline(TEXT(' '), TEXT(';'));
	Languages.ParseIntoArray(OutLanguageList, TEXT(";"), /* inCullEmpty */ true);
}

void URpgGameData::UpdateSettings()
{
	this->ProjectSettings = GetOne(this->ProjectSettingsList);
	this->StartingSet = GetOne(this->StartingSets);
}

const TArray<UGameDataDocument*>& URpgGameData::GetAllDocuments() const
{
	if (AllDocuments != nullptr)
	{
		return AllDocuments.ToSharedRef().Get();
	}

	const auto FoundDocuments = MakeShared<TArray<UGameDataDocument*>>();
	for (const auto DocumentById : AllProjectSettingsList)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllParameters)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllParameterValues)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllProvisions)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllHeros)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllItems)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllLocations)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllTrinkets)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllMonsters)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllLoots)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllCombatEffects)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllCurioCleansingOptions)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllCurios)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllDiseases)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllQuirks)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllConditionsList)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllWeapons)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllArmors)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllItemWithCounts)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : AllStartingSets)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	const_cast<URpgGameData*>(this)->AllDocuments = FoundDocuments;
	return FoundDocuments.Get();
}

const TArray<UGameDataDocument*>& URpgGameData::GetRootDocuments() const
{
	if (RootDocuments != nullptr)
	{
		return RootDocuments.ToSharedRef().Get();
	}

	const auto FoundDocuments = MakeShared<TArray<UGameDataDocument*>>();
	for (const auto DocumentById : ProjectSettingsList)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Parameters)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : ParameterValues)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Provisions)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Heros)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Items)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Locations)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Trinkets)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Monsters)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Loots)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : CombatEffects)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : CurioCleansingOptions)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Curios)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Diseases)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Quirks)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : ConditionsList)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Weapons)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : Armors)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : ItemWithCounts)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	for (const auto DocumentById : StartingSets)
	{
		FoundDocuments->Add(DocumentById.Value);
	}
	const_cast<URpgGameData*>(this)->RootDocuments = FoundDocuments;
	return FoundDocuments.Get();
}

template <typename IdType, typename DocumentType>
DocumentType* URpgGameData::GetOne(const TMap<IdType, DocumentType*>& Documents) const
{
	if (Documents.Num() == 1)
	{
        auto Iterator = Documents.CreateConstIterator();
        return Iterator->Value;
	}
	return nullptr;
}

template <typename IdType, typename DocumentType>
void URpgGameData::ToMapById(TMap<IdType, DocumentType*>& DocumentsById, TArray<DocumentType*>& Documents)
{
	for (auto Document : Documents)
	{
		DocumentsById.FindOrAdd(Document->Id, Document);
	}
}

UGameDataDocument* URpgGameData::FindGameDataDocumentById(const FString& SchemaNameOrId, const FString& DocumentId)
{
	if (SchemaNameOrId.IsEmpty() || DocumentId.IsEmpty())
	{
		return nullptr;
	}
	else if (SchemaNameOrId == TEXT("ProjectSettings") || SchemaNameOrId == TEXT("55a4f32faca22e191098f3d9"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllProjectSettingsList.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Parameter") || SchemaNameOrId == TEXT("59f5b0a730bb84165c06b547"))
	{
		EParameterId Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllParameters.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("ParameterValue") || SchemaNameOrId == TEXT("59f5b11030bb84165c06b54e"))
	{
		int32 Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllParameterValues.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Provision") || SchemaNameOrId == TEXT("59f5b1c830bb84165c06b556"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllProvisions.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Hero") || SchemaNameOrId == TEXT("59f5b29330bb84165c06b55c"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllHeros.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Item") || SchemaNameOrId == TEXT("59f5b3f130bb84165c06b56b"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllItems.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Location") || SchemaNameOrId == TEXT("59f5b57530bb84165c06b579"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllLocations.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Trinket") || SchemaNameOrId == TEXT("59f5b61630bb84165c06b57f"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllTrinkets.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Monster") || SchemaNameOrId == TEXT("59f5b7f330bb84165c06b58a"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllMonsters.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Loot") || SchemaNameOrId == TEXT("59f5b9dd30bb84165c06b59a"))
	{
		int32 Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllLoots.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("CombatEffect") || SchemaNameOrId == TEXT("59f5baaa30bb84165c06b5a0"))
	{
		int32 Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllCombatEffects.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("CurioCleansingOption") || SchemaNameOrId == TEXT("59f5bac130bb84165c06b5a4"))
	{
		int32 Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllCurioCleansingOptions.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Curio") || SchemaNameOrId == TEXT("59f5bbc230bb84165c06b5ae"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllCurios.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Disease") || SchemaNameOrId == TEXT("59f5d3a7983a361970003662"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllDiseases.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Quirk") || SchemaNameOrId == TEXT("59f5d728983a361970003684"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllQuirks.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Conditions") || SchemaNameOrId == TEXT("59f5dedf983a361970003697"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllConditionsList.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Weapon") || SchemaNameOrId == TEXT("59f9e745983a364298db5e22"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllWeapons.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("Armor") || SchemaNameOrId == TEXT("59f9e7b6983a364298db5e2c"))
	{
		FString Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllArmors.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("ItemWithCount") || SchemaNameOrId == TEXT("5a1d78d107ff9a7b889cba7d"))
	{
		int32 Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllItemWithCounts.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	else if (SchemaNameOrId == TEXT("StartingSet") || SchemaNameOrId == TEXT("5a1d78de07ff9a7b889cba83"))
	{
		int32 Id;
		FGameDataDocumentIdConvert::ConvertToType(DocumentId, Id);
		const auto FoundDocument = this->AllStartingSets.Find(Id);
		if (FoundDocument != nullptr)
		{
			return *FoundDocument;
		}
	}
	return nullptr;
}

UClass* URpgGameData::FindDocumentSchemaClass(const FString& SchemaNameOrId)
{
	if (SchemaNameOrId.IsEmpty())
	{
		return nullptr;
	}
	else if (SchemaNameOrId == TEXT("ProjectSettings") || SchemaNameOrId == TEXT("55a4f32faca22e191098f3d9"))
	{
		return URpgGameDataProjectSettings::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Parameter") || SchemaNameOrId == TEXT("59f5b0a730bb84165c06b547"))
	{
		return UParameter::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("ParameterValue") || SchemaNameOrId == TEXT("59f5b11030bb84165c06b54e"))
	{
		return UParameterValue::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Provision") || SchemaNameOrId == TEXT("59f5b1c830bb84165c06b556"))
	{
		return UProvision::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Hero") || SchemaNameOrId == TEXT("59f5b29330bb84165c06b55c"))
	{
		return UHero::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Item") || SchemaNameOrId == TEXT("59f5b3f130bb84165c06b56b"))
	{
		return UItem::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Location") || SchemaNameOrId == TEXT("59f5b57530bb84165c06b579"))
	{
		return ULocation::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Trinket") || SchemaNameOrId == TEXT("59f5b61630bb84165c06b57f"))
	{
		return UTrinket::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Monster") || SchemaNameOrId == TEXT("59f5b7f330bb84165c06b58a"))
	{
		return UMonster::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Loot") || SchemaNameOrId == TEXT("59f5b9dd30bb84165c06b59a"))
	{
		return ULoot::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("CombatEffect") || SchemaNameOrId == TEXT("59f5baaa30bb84165c06b5a0"))
	{
		return UCombatEffect::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("CurioCleansingOption") || SchemaNameOrId == TEXT("59f5bac130bb84165c06b5a4"))
	{
		return UCurioCleansingOption::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Curio") || SchemaNameOrId == TEXT("59f5bbc230bb84165c06b5ae"))
	{
		return UCurio::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Disease") || SchemaNameOrId == TEXT("59f5d3a7983a361970003662"))
	{
		return UDisease::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Quirk") || SchemaNameOrId == TEXT("59f5d728983a361970003684"))
	{
		return UQuirk::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Conditions") || SchemaNameOrId == TEXT("59f5dedf983a361970003697"))
	{
		return UCondition::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Weapon") || SchemaNameOrId == TEXT("59f9e745983a364298db5e22"))
	{
		return UWeapon::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("Armor") || SchemaNameOrId == TEXT("59f9e7b6983a364298db5e2c"))
	{
		return UArmor::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("ItemWithCount") || SchemaNameOrId == TEXT("5a1d78d107ff9a7b889cba7d"))
	{
		return UItemWithCount::StaticClass();
	}
	else if (SchemaNameOrId == TEXT("StartingSet") || SchemaNameOrId == TEXT("5a1d78de07ff9a7b889cba83"))
	{
		return UStartingSet::StaticClass();
	}
	return nullptr;
}

void URpgGameData::GetDocumentIds(const FString& SchemaNameOrId, TArray<FString>& AllIds)
{
	if (SchemaNameOrId.IsEmpty())
	{
		return;
	}
	else if (SchemaNameOrId == TEXT("ProjectSettings") || SchemaNameOrId == TEXT("55a4f32faca22e191098f3d9"))
	{
		for (auto DocumentById : AllProjectSettingsList)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Parameter") || SchemaNameOrId == TEXT("59f5b0a730bb84165c06b547"))
	{
		for (auto DocumentById : AllParameters)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("ParameterValue") || SchemaNameOrId == TEXT("59f5b11030bb84165c06b54e"))
	{
		for (auto DocumentById : AllParameterValues)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Provision") || SchemaNameOrId == TEXT("59f5b1c830bb84165c06b556"))
	{
		for (auto DocumentById : AllProvisions)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Hero") || SchemaNameOrId == TEXT("59f5b29330bb84165c06b55c"))
	{
		for (auto DocumentById : AllHeros)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Item") || SchemaNameOrId == TEXT("59f5b3f130bb84165c06b56b"))
	{
		for (auto DocumentById : AllItems)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Location") || SchemaNameOrId == TEXT("59f5b57530bb84165c06b579"))
	{
		for (auto DocumentById : AllLocations)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Trinket") || SchemaNameOrId == TEXT("59f5b61630bb84165c06b57f"))
	{
		for (auto DocumentById : AllTrinkets)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Monster") || SchemaNameOrId == TEXT("59f5b7f330bb84165c06b58a"))
	{
		for (auto DocumentById : AllMonsters)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Loot") || SchemaNameOrId == TEXT("59f5b9dd30bb84165c06b59a"))
	{
		for (auto DocumentById : AllLoots)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("CombatEffect") || SchemaNameOrId == TEXT("59f5baaa30bb84165c06b5a0"))
	{
		for (auto DocumentById : AllCombatEffects)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("CurioCleansingOption") || SchemaNameOrId == TEXT("59f5bac130bb84165c06b5a4"))
	{
		for (auto DocumentById : AllCurioCleansingOptions)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Curio") || SchemaNameOrId == TEXT("59f5bbc230bb84165c06b5ae"))
	{
		for (auto DocumentById : AllCurios)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Disease") || SchemaNameOrId == TEXT("59f5d3a7983a361970003662"))
	{
		for (auto DocumentById : AllDiseases)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Quirk") || SchemaNameOrId == TEXT("59f5d728983a361970003684"))
	{
		for (auto DocumentById : AllQuirks)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Conditions") || SchemaNameOrId == TEXT("59f5dedf983a361970003697"))
	{
		for (auto DocumentById : AllConditionsList)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Weapon") || SchemaNameOrId == TEXT("59f9e745983a364298db5e22"))
	{
		for (auto DocumentById : AllWeapons)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("Armor") || SchemaNameOrId == TEXT("59f9e7b6983a364298db5e2c"))
	{
		for (auto DocumentById : AllArmors)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("ItemWithCount") || SchemaNameOrId == TEXT("5a1d78d107ff9a7b889cba7d"))
	{
		for (auto DocumentById : AllItemWithCounts)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
	else if (SchemaNameOrId == TEXT("StartingSet") || SchemaNameOrId == TEXT("5a1d78de07ff9a7b889cba83"))
	{
		for (auto DocumentById : AllStartingSets)
		{
			FString IdString;
			FGameDataDocumentIdConvert::ConvertToString(DocumentById.Key, IdString);
			AllIds.Add(IdString);
		}
	}
}

void URpgGameData::GetDocumentSchemaNames(TArray<FString>& AllSchemaNames)
{
	AllSchemaNames.Add(TEXT("ProjectSettings"));
	AllSchemaNames.Add(TEXT("Parameter"));
	AllSchemaNames.Add(TEXT("ParameterValue"));
	AllSchemaNames.Add(TEXT("Provision"));
	AllSchemaNames.Add(TEXT("Hero"));
	AllSchemaNames.Add(TEXT("Item"));
	AllSchemaNames.Add(TEXT("Location"));
	AllSchemaNames.Add(TEXT("Trinket"));
	AllSchemaNames.Add(TEXT("Monster"));
	AllSchemaNames.Add(TEXT("Loot"));
	AllSchemaNames.Add(TEXT("CombatEffect"));
	AllSchemaNames.Add(TEXT("CurioCleansingOption"));
	AllSchemaNames.Add(TEXT("Curio"));
	AllSchemaNames.Add(TEXT("Disease"));
	AllSchemaNames.Add(TEXT("Quirk"));
	AllSchemaNames.Add(TEXT("Conditions"));
	AllSchemaNames.Add(TEXT("Weapon"));
	AllSchemaNames.Add(TEXT("Armor"));
	AllSchemaNames.Add(TEXT("ItemWithCount"));
	AllSchemaNames.Add(TEXT("StartingSet"));
}


TSharedRef<IGameDataReader> URpgGameData::CreateReader(FArchive* const GameDataStream, const FGameDataLoadOptions& Options)
{
	switch (Options.Format)
	{
	case EGameDataFormat::Json:
		return FGameDataReaderFactory::CreateJsonReader(GameDataStream);
	case EGameDataFormat::MessagePack:
		return FGameDataReaderFactory::CreateMessagePackReader(GameDataStream);
	default:
		UE_LOG(LogURpgGameData, Error, TEXT("Unknown game data format specified in FGameDataLoadOptions. Fallback to JSON formatter."));
		return FGameDataReaderFactory::CreateJsonReader(GameDataStream);
	}
}

bool URpgGameData::ReadGameData(const TSharedRef<IGameDataReader>& Reader)
{
	auto GameDataPath = TArray<FString>();
	GameDataPath.Add(TEXT(""));

	if (!Reader->ReadObjectBegin())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto MemberName = Reader->ReadMember();
		if (MemberName == TEXT("ChangeNumber"))
		{
			Reader->ReadValue(ChangeNumber);
			Reader->ReadNext();
		}
		else if (MemberName == TEXT("RevisionHash"))
		{
			Reader->ReadValue(RevisionHash);
			Reader->ReadNext();
		}
		else if (MemberName == TEXT("Collections"))
		{
			GameDataPath.Add(TEXT("Collections"));
			Reader->ReadObjectBegin();
			while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
			{
				if (Reader->IsError())
				{
					UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
					return false;
				}

				auto CollectionName = Reader->ReadMember();
				GameDataPath.Add(CollectionName);
				switch (CollectionName.Len())
				{
					case 4:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("59f5b29330bb84165c06b55c") || CollectionName == TEXT("Hero"))
						{
							GameDataPath.Add(TEXT("Hero"));
							if (!ReadDocumentCollection(Reader, this->Heros, 3, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Hero"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else if (CollectionName == TEXT("59f5b3f130bb84165c06b56b") || CollectionName == TEXT("Item"))
						{
							GameDataPath.Add(TEXT("Item"));
							if (!ReadDocumentCollection(Reader, this->Items, 23, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Item"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else if (CollectionName == TEXT("59f5b9dd30bb84165c06b59a") || CollectionName == TEXT("Loot"))
						{
							GameDataPath.Add(TEXT("Loot"));
							if (!ReadDocumentCollection(Reader, this->Loots, 100, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Loot"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 5:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("59f5bbc230bb84165c06b5ae") || CollectionName == TEXT("Curio"))
						{
							GameDataPath.Add(TEXT("Curio"));
							if (!ReadDocumentCollection(Reader, this->Curios, 5, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Curio"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else if (CollectionName == TEXT("59f5d728983a361970003684") || CollectionName == TEXT("Quirk"))
						{
							GameDataPath.Add(TEXT("Quirk"));
							if (!ReadDocumentCollection(Reader, this->Quirks, 8, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Quirk"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else if (CollectionName == TEXT("59f9e7b6983a364298db5e2c") || CollectionName == TEXT("Armor"))
						{
							GameDataPath.Add(TEXT("Armor"));
							if (!ReadDocumentCollection(Reader, this->Armors, 100, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Armor"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 6:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("59f9e745983a364298db5e22") || CollectionName == TEXT("Weapon"))
						{
							GameDataPath.Add(TEXT("Weapon"));
							if (!ReadDocumentCollection(Reader, this->Weapons, 100, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Weapon"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 7:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("59f5b61630bb84165c06b57f") || CollectionName == TEXT("Trinket"))
						{
							GameDataPath.Add(TEXT("Trinket"));
							if (!ReadDocumentCollection(Reader, this->Trinkets, 6, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Trinket"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else if (CollectionName == TEXT("59f5b7f330bb84165c06b58a") || CollectionName == TEXT("Monster"))
						{
							GameDataPath.Add(TEXT("Monster"));
							if (!ReadDocumentCollection(Reader, this->Monsters, 6, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Monster"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else if (CollectionName == TEXT("59f5d3a7983a361970003662") || CollectionName == TEXT("Disease"))
						{
							GameDataPath.Add(TEXT("Disease"));
							if (!ReadDocumentCollection(Reader, this->Diseases, 6, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Disease"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 8:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("59f5b57530bb84165c06b579") || CollectionName == TEXT("Location"))
						{
							GameDataPath.Add(TEXT("Location"));
							if (!ReadDocumentCollection(Reader, this->Locations, 7, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Location"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 9:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("59f5b0a730bb84165c06b547") || CollectionName == TEXT("Parameter"))
						{
							GameDataPath.Add(TEXT("Parameter"));
							if (!ReadDocumentCollection(Reader, this->Parameters, 39, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Parameter"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else if (CollectionName == TEXT("59f5b1c830bb84165c06b556") || CollectionName == TEXT("Provision"))
						{
							GameDataPath.Add(TEXT("Provision"));
							if (!ReadDocumentCollection(Reader, this->Provisions, 10, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Provision"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 10:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("59f5dedf983a361970003697") || CollectionName == TEXT("Conditions"))
						{
							GameDataPath.Add(TEXT("Conditions"));
							if (!ReadDocumentCollection(Reader, this->ConditionsList, 18, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("Conditions"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 11:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("5a1d78de07ff9a7b889cba83") || CollectionName == TEXT("StartingSet"))
						{
							GameDataPath.Add(TEXT("StartingSet"));
							if (!ReadDocumentCollection(Reader, this->StartingSets, 1, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("StartingSet"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 12:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("59f5baaa30bb84165c06b5a0") || CollectionName == TEXT("CombatEffect"))
						{
							GameDataPath.Add(TEXT("CombatEffect"));
							if (!ReadDocumentCollection(Reader, this->CombatEffects, 100, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("CombatEffect"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 13:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("5a1d78d107ff9a7b889cba7d") || CollectionName == TEXT("ItemWithCount"))
						{
							GameDataPath.Add(TEXT("ItemWithCount"));
							if (!ReadDocumentCollection(Reader, this->ItemWithCounts, 100, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("ItemWithCount"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 14:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("59f5b11030bb84165c06b54e") || CollectionName == TEXT("ParameterValue"))
						{
							GameDataPath.Add(TEXT("ParameterValue"));
							if (!ReadDocumentCollection(Reader, this->ParameterValues, 100, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("ParameterValue"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 15:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("55a4f32faca22e191098f3d9") || CollectionName == TEXT("ProjectSettings"))
						{
							GameDataPath.Add(TEXT("ProjectSettings"));
							if (!ReadDocumentCollection(Reader, this->ProjectSettingsList, 1, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("ProjectSettings"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					case 20:
						if (CollectionName.IsEmpty())
						{
							Reader->SkipAny();
						}
						else if (CollectionName == TEXT("59f5bac130bb84165c06b5a4") || CollectionName == TEXT("CurioCleansingOption"))
						{
							GameDataPath.Add(TEXT("CurioCleansingOption"));
							if (!ReadDocumentCollection(Reader, this->CurioCleansingOptions, 100, this, GameDataPath))
							{
								UE_LOG(LogURpgGameData, Error, TEXT("Failed to read '%s' document collection. Path: %s."), TEXT("CurioCleansingOption"), *CombineGameDataPath(GameDataPath));
								return false;
							}
							GameDataPath.Pop();
						}
						else
						{
							Reader->SkipAny();
						}
						break;
					default:
						Reader->SkipAny();
						break;
				}
			}
			Reader->ReadObjectEnd();
			GameDataPath.Pop();
			break;
		}
		else
		{
			Reader->SkipAny();
		}
	}
	Reader->ReadObjectEnd();
	GameDataPath.Pop();

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	URpgGameDataProjectSettings*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<URpgGameDataProjectSettings>(Outer, URpgGameDataProjectSettings::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("ProjectSettings.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ProjectSettings.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("RpgGameDataProjectSettings_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Name"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("ProjectSettings.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Name) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ProjectSettings.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("PrimaryLanguage"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->PrimaryLanguage) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ProjectSettings.PrimaryLanguage"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Languages"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->Languages) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ProjectSettings.Languages"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Copyright"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->Copyright) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ProjectSettings.Copyright"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Version"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("ProjectSettings.Version"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Version) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ProjectSettings.Version"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UParameter*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UParameter>(Outer, UParameter::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Parameter.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Parameter.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Parameter_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("MinValue"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->MinValue) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Parameter.MinValue"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("MaxValue"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->MaxValue) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Parameter.MaxValue"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("MinValueParameter"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = ReadDocumentReference(Reader, Document->MinValueParameterRaw, TEXT("Parameter"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Parameter.MinValueParameter"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("MaxValueParameter"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = ReadDocumentReference(Reader, Document->MaxValueParameterRaw, TEXT("Parameter"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Parameter.MaxValueParameter"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("ValueKind"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Parameter.ValueKind"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->ValueKind) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Parameter.ValueKind"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UParameterValue*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UParameterValue>(Outer, UParameterValue::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("ParameterValue.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ParameterValue.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("ParameterValue_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Parameter"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("ParameterValue.Parameter"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentReference(Reader, Document->ParameterRaw, TEXT("Parameter"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ParameterValue.Parameter"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Value"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("ParameterValue.Value"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Value) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ParameterValue.Value"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Condition"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = ReadDocumentReference(Reader, Document->ConditionRaw, TEXT("Conditions"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ParameterValue.Condition"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UProvision*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UProvision>(Outer, UProvision::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Provision.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Provision.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Provision_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Cost"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Provision.Cost"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Cost) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Provision.Cost"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Item"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Provision.Item"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocument(Reader, Document->Item, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Provision.Item"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UHero*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UHero>(Outer, UHero::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Hero_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Name"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->NameRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Bio"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.Bio"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->BioRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.Bio"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Religious"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.Religious"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Religious) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.Religious"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("DislikeHeroes"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.DislikeHeroes"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentReferenceCollection(Reader, Document->DislikeHeroesRaw, TEXT("Hero"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.DislikeHeroes"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Provisions"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = ReadDocumentReference(Reader, Document->ProvisionsRaw, TEXT("Provision"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.Provisions"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("ProvisionsCount"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.ProvisionsCount"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->ProvisionsCount) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.ProvisionsCount"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("MovementForward"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.MovementForward"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->MovementForward) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.MovementForward"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("MovementBackward"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.MovementBackward"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->MovementBackward) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.MovementBackward"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Protection"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.Protection"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Protection) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.Protection"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("AccuracyModifier"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.AccuracyModifier"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->AccuracyModifier) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.AccuracyModifier"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("StunResistance"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.StunResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->StunResistance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.StunResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("BlightResistance"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.BlightResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->BlightResistance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.BlightResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("DiseaseResistance"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.DiseaseResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->DiseaseResistance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.DiseaseResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("DeathBlowResistance"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.DeathBlowResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->DeathBlowResistance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.DeathBlowResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("MoveResistance"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.MoveResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->MoveResistance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.MoveResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("BleedResistance"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.BleedResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->BleedResistance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.BleedResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("DebuffResistance"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.DebuffResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->DebuffResistance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.DebuffResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("TrapResistance"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.TrapResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->TrapResistance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.TrapResistance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Armors"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.Armors"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->Armors, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.Armors"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Weapons"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Hero.Weapons"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->Weapons, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Hero.Weapons"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UItem*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UItem>(Outer, UItem::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Item.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Item.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Item_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Name"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Item.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->NameRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Item.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Description"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->DescriptionRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Item.Description"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("StackSize"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Item.StackSize"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->StackSize) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Item.StackSize"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("GoldValue"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Item.GoldValue"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->GoldValue) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Item.GoldValue"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("ActivationEffects"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Item.ActivationEffects"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->ActivationEffects, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Item.ActivationEffects"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	ULocation*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<ULocation>(Outer, ULocation::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Location.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Location.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Location_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Name"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Location.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->NameRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Location.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Flags"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->Flags) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Location.Flags"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UTrinket*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UTrinket>(Outer, UTrinket::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Trinket.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Trinket.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Trinket_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Rarity"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Trinket.Rarity"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Rarity) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Trinket.Rarity"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("OriginDungeon"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = ReadDocumentReference(Reader, Document->OriginDungeonRaw, TEXT("Location"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Trinket.OriginDungeon"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("HeroRestriction"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = ReadDocumentReference(Reader, Document->HeroRestrictionRaw, TEXT("Hero"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Trinket.HeroRestriction"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Item"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Trinket.Item"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocument(Reader, Document->Item, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Trinket.Item"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Effects"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Trinket.Effects"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->Effects, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Trinket.Effects"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UMonster*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UMonster>(Outer, UMonster::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Monster.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Monster.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Monster_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Name"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Monster.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->NameRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Monster.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Type"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Monster.Type"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Type) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Monster.Type"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("SecondType"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->SecondType) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Monster.SecondType"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Parameters"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Monster.Parameters"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->Parameters, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Monster.Parameters"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Locations"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Monster.Locations"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentReferenceCollection(Reader, Document->LocationsRaw, TEXT("Location"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Monster.Locations"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	ULoot*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<ULoot>(Outer, ULoot::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Loot.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Loot.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Loot_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Type"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Loot.Type"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Type) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Loot.Type"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Amount"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->Amount) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Loot.Amount"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UCombatEffect*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UCombatEffect>(Outer, UCombatEffect::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("CombatEffect.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CombatEffect.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("CombatEffect_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Changes"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("CombatEffect.Changes"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->Changes, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CombatEffect.Changes"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Duration"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->Duration) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CombatEffect.Duration"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("DurationUnit"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("CombatEffect.DurationUnit"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->DurationUnit) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CombatEffect.DurationUnit"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UCurioCleansingOption*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UCurioCleansingOption>(Outer, UCurioCleansingOption::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("CurioCleansingOption_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Chance"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.Chance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Chance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.Chance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Item"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = ReadDocumentReference(Reader, Document->ItemRaw, TEXT("Item"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.Item"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Loot"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.Loot"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->Loot, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.Loot"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("QuirkChance"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->QuirkChance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.QuirkChance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("DiseaseChance"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			bReadSuccess = Reader->ReadValue(Document->DiseaseChance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.DiseaseChance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Effects"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.Effects"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->Effects, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.Effects"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("ItemIsConsumed"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.ItemIsConsumed"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->ItemIsConsumed) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("CurioCleansingOption.ItemIsConsumed"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UCurio*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UCurio>(Outer, UCurio::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Curio.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Curio.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Curio_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Type"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Curio.Type"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Type) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Curio.Type"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Name"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Curio.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->NameRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Curio.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Description"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Curio.Description"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->DescriptionRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Curio.Description"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("CleansingOptions"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Curio.CleansingOptions"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->CleansingOptions, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Curio.CleansingOptions"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("PlacementRestictions"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Curio.PlacementRestictions"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->PlacementRestictions) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Curio.PlacementRestictions"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Locations"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Curio.Locations"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentReferenceCollection(Reader, Document->LocationsRaw, TEXT("Location"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Curio.Locations"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UDisease*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UDisease>(Outer, UDisease::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Disease.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Disease.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Disease_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Name"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Disease.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->NameRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Disease.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Effects"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Disease.Effects"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->Effects, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Disease.Effects"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UQuirk*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UQuirk>(Outer, UQuirk::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Quirk.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Quirk.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Quirk_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Name"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Quirk.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->NameRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Quirk.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("IsPositive"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Quirk.IsPositive"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->IsPositive) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Quirk.IsPositive"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Effects"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Quirk.Effects"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->Effects, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Quirk.Effects"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UCondition*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UCondition>(Outer, UCondition::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Conditions.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Conditions.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Condition_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Description"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Conditions.Description"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->DescriptionRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Conditions.Description"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Check"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Conditions.Check"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadFormula(Reader, Document->Check, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Conditions.Check"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("UnboundCheck"))
		{
			if (Reader->IsNull())
			{
				Reader->ReadNext();
				continue;
			}
			TSharedPtr<FJsonObject> FormulaObject;
			bReadSuccess = Reader->ReadObject(FormulaObject);
			Document->UnboundCheck.JsonObject = FormulaObject;
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Conditions.UnboundCheck"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UWeapon*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UWeapon>(Outer, UWeapon::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Weapon.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Weapon.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Weapon_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Name"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Weapon.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->NameRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Weapon.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("DamageFrom"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Weapon.DamageFrom"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->DamageFrom) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Weapon.DamageFrom"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("DamageTo"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Weapon.DamageTo"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->DamageTo) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Weapon.DamageTo"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("CriticalStrikeChance"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Weapon.CriticalStrikeChance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->CriticalStrikeChance) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Weapon.CriticalStrikeChance"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Speed"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Weapon.Speed"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Speed) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Weapon.Speed"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UArmor*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UArmor>(Outer, UArmor::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Armor.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Armor.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("Armor_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Name"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Armor.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadLocalizedText(Reader, Document->NameRaw, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Armor.Name"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Dodge"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Armor.Dodge"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Dodge) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Armor.Dodge"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("HitPoints"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("Armor.HitPoints"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->HitPoints) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("Armor.HitPoints"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UItemWithCount*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UItemWithCount>(Outer, UItemWithCount::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("ItemWithCount.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ItemWithCount.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("ItemWithCount_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Item"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("ItemWithCount.Item"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentReference(Reader, Document->ItemRaw, TEXT("Item"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ItemWithCount.Item"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Count"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("ItemWithCount.Count"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Count) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("ItemWithCount.Count"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
bool URpgGameData::ReadDocument
(
	const TSharedRef<IGameDataReader>& Reader,
	UStartingSet*& Document,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Document = NewObject<UStartingSet>(Outer, UStartingSet::StaticClass(), NAME_None, RF_Transactional);
	Outer = Document;

	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto PropertyName = Reader->ReadMember();
		bool bReadSuccess;
		GameDataPath.Add(PropertyName);
		if (PropertyName.IsEmpty())
		{
			Reader->SkipAny();
		}
		else if (PropertyName == TEXT("Id"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("StartingSet.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = Reader->ReadValue(Document->Id) && Reader->ReadNext();
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("StartingSet.Id"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			FString NewName;
			FGameDataDocumentIdConvert::ConvertToString(Document->Id, NewName);
			NewName.InsertAt(0, TEXT("StartingSet_"));

			UObject* ExistingObject = StaticFindObject(/*Class=*/ nullptr, Outer, *NewName, true);
			if (ExistingObject)
			{
				ExistingObject->Rename(nullptr, GetTransientPackage(), 0); // detach existing document
			}

			Document->Rename(*NewName, nullptr, REN_DoNotDirty | REN_DontCreateRedirectors | REN_ForceNoResetLoaders);
		}
		else if (PropertyName == TEXT("Items"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("StartingSet.Items"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentCollection(Reader, Document->Items, 0, Outer, GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("StartingSet.Items"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Heroes"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("StartingSet.Heroes"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentReferenceCollection(Reader, Document->HeroesRaw, TEXT("Hero"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("StartingSet.Heroes"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else if (PropertyName == TEXT("Location"))
		{
			if (Reader->IsNull())
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Unexpected null value for property '%s' of document. Path: %s."), TEXT("StartingSet.Location"), *CombineGameDataPath(GameDataPath));
				return false;
			}
			bReadSuccess = ReadDocumentReference(Reader, Document->LocationRaw, TEXT("Location"), GameDataPath);
			if (!bReadSuccess)
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read value for property '%s' of document. Path: %s."), TEXT("StartingSet.Location"), *CombineGameDataPath(GameDataPath));
				return false;
			}
		}
		else
		{
			Reader->SkipAny();
		}
		GameDataPath.Pop();
	}
	Reader->ReadObjectEnd(NextToken);

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}
template <typename IdType, typename DocumentType>
bool URpgGameData::ReadDocumentCollection
(
	const TSharedRef<IGameDataReader>& Reader,
	TMap<IdType,DocumentType*>& Collection,
	int32 Capacity,
	UObject* Outer,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Collection.Empty();
	if (Reader->IsNull())
	{
		return true;
	}

	const bool IsByIdCollection = Reader->GetNotation() == EJsonNotation::ObjectStart;
	auto Documents = TArray<DocumentType*>();

	if (Capacity > 0)
	{
		Documents.Reserve(Capacity);
	}

	if (IsByIdCollection)
	{
		Reader->ReadObjectBegin();
	}
	else
	{
		Reader->ReadArrayBegin();
	}

	int32 Count = -1;
	while (Reader->GetNotation() != EJsonNotation::ArrayEnd &&
			Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		Count++;

		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}
		if (Reader->IsNull())
		{
			Reader->ReadNext();
			continue;
		}

		auto DocumentId = Reader->GetIdentifier();
		if (!DocumentId.IsEmpty())
		{
			GameDataPath.Add(DocumentId);
		}
		else
		{
			GameDataPath.Add(FString::FromInt(Count));
		}

		DocumentType* Document = nullptr;
		if (ReadDocument(Reader, Document, Outer, GameDataPath) && Document != nullptr)
		{
			Documents.Add(Document);
		}
		else
		{
			UE_LOG(LogURpgGameData, Error, TEXT("Failed to read document. Path: %s."), *CombineGameDataPath(GameDataPath));
			return false;
		}

		GameDataPath.Pop();
	}
	if (IsByIdCollection)
	{
		Reader->ReadObjectEnd(NextToken);
	}
	else
	{
		Reader->ReadArrayEnd(NextToken);
	}

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	ToMapById(Collection, Documents);

	return true;
}
bool URpgGameData::ReadLocalizedText
(
	const TSharedRef<IGameDataReader>& Reader,
	FLocalizedText& LocalizedText,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	auto LocStringMap = TMap<FString, FText>();
	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		FString LanguageId = Reader->ReadMember();
		if (LanguageId == TEXT("notes")) {
			Reader->SkipAny();
			continue;
		}

		FText Text;
		GameDataPath.Add(LanguageId);
		if (!Reader->ReadValue(Text))
		{
			UE_LOG(LogURpgGameData, Error, TEXT("Failed to read localized text for language '%s'. Path: %s."), *LanguageId, *CombineGameDataPath(GameDataPath));
			return false;
		}
		Reader->ReadNext();
		GameDataPath.Pop();

		if (LanguageId.IsEmpty() || Text.IsEmpty())
		{
			continue;
		}
		LocStringMap.Add(LanguageId, Text);
	}
	Reader->ReadObjectEnd(NextToken);

	LocalizedText = FLocalizedText(LocStringMap, LanguageSwitcher);
	return true;
}

template <typename DocumentReferenceType>
bool URpgGameData::ReadDocumentReferenceCollection
(
	const TSharedRef<IGameDataReader>& Reader,
	TArray<DocumentReferenceType>& Collection,
	const FString& SchemaIdOrName,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	Collection.Empty();
	if (Reader->IsNull())
	{
		return true;
	}

	const bool IsByIdCollection = Reader->GetNotation() == EJsonNotation::ObjectStart;

	if (IsByIdCollection)
	{
		Reader->ReadObjectBegin();
	}
	else
	{
		Reader->ReadArrayBegin();
	}
	while (Reader->GetNotation() != EJsonNotation::ArrayEnd &&
			Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}
		if (Reader->IsNull())
		{
			Reader->ReadNext();
			continue;
		}

		DocumentReferenceType DocumentReference;
		if (!ReadDocumentReference(Reader, DocumentReference, SchemaIdOrName, GameDataPath))
		{
			UE_LOG(LogURpgGameData, Error, TEXT("Failed to read document reference. Path: %s."), *CombineGameDataPath(GameDataPath));
			return false;
		}
		Collection.Add(DocumentReference);
	}
	if (IsByIdCollection)
	{
		Reader->ReadObjectEnd(NextToken);
	}
	else
	{
		Reader->ReadArrayEnd(NextToken);
	}

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	return true;
}

bool URpgGameData::ReadDocumentReference
(
	const TSharedRef<IGameDataReader>& Reader,
	FGameDataDocumentReference& DocumentReference,
	const FString& SchemaIdOrName,
	TArray<FString>& GameDataPath,
	bool NextToken
)
{
	FString Id;
	Reader->ReadObjectBegin();
	while (Reader->GetNotation() != EJsonNotation::ObjectEnd)
	{
		if (Reader->IsError())
		{
			UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
			return false;
		}

		auto MemberName = Reader->ReadMember();
		if (MemberName == TEXT("Id"))
		{
			if (!Reader->ReadValue(Id))
			{
				UE_LOG(LogURpgGameData, Error, TEXT("Failed to read 'Id' value for document reference. Path: %s."), *CombineGameDataPath(GameDataPath));
				return false;
			}
			Reader->ReadNext();
		}
		else
		{
			Reader->SkipAny();
		}
	}

	Reader->ReadObjectEnd(NextToken);

	if (Id.IsEmpty())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("Document reference 'Id' is null or empty. Path: %s."), *CombineGameDataPath(GameDataPath));
		return false;
	}

	DocumentReference.Id = Id;
	DocumentReference.SchemaIdOrName = SchemaIdOrName;
	DocumentReference.GameData = this;

	return true;
}

template <typename FormulaType>
bool URpgGameData::ReadFormula
(
		const TSharedRef<IGameDataReader>& Reader,
		FormulaType*& Formula,
		UObject* Outer,
		TArray<FString>& GameDataPath,
		bool NextToken
)
{
	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	TSharedPtr<FJsonObject> FormulaObject;
	if (!Reader->ReadObject(FormulaObject, NextToken) || FormulaObject == nullptr)
	{
		UE_LOG(LogURpgGameData, Error, TEXT("Failed to read JsonObject for Formula data type. Path: %s."), *CombineGameDataPath(GameDataPath));
		return false;
	}

	if (Reader->IsError())
	{
		UE_LOG(LogURpgGameData, Error, TEXT("File pasing failed due error '%s'. Path: %s."), *Reader->GetErrorMessage(), *CombineGameDataPath(GameDataPath));
		return false;
	}

	Formula = NewObject<FormulaType>(Outer);
	Formula->ExpressionTree.JsonObject = FormulaObject;

	return true;
}

FString URpgGameData::CombineGameDataPath(const TArray<FString>& GameDataPath)
{
	return FString::Join(GameDataPath, TEXT("/"));
}
TSharedPtr<FJsonObject> URpgGameData::MergeGameData(const TSharedPtr<FJsonObject>& GameDataDocument, const TSharedPtr<FJsonObject>& PatchDocument)
{
	const TSharedPtr<FJsonObject>* GameDataCollections;
	if (!GameDataDocument->TryGetObjectField(TEXT("Collections"), GameDataCollections)) {
		GameDataCollections = nullptr;
	}

	const TSharedPtr<FJsonObject>* PatchCollections;
	if (!PatchDocument->TryGetObjectField(TEXT("Collections"), PatchCollections)) {
		PatchCollections = nullptr;
	}

	auto MergedCollections = MakeShared<FJsonObject>();
	if (GameDataCollections != nullptr && GameDataCollections->IsValid() &&
		PatchCollections != nullptr && PatchCollections->IsValid())
	{
		auto& GameDataCollectionsMap = GameDataCollections->Get()->Values;
		auto& PatchCollectionsMap = PatchCollections->Get()->Values;

		TSet<FString> VisitedSchemas;
		auto SchemaNames = MergeKeys(GameDataCollectionsMap, PatchCollectionsMap);

		for (auto SchemaName : SchemaNames.Get())
		{
			if (VisitedSchemas.Contains(SchemaName))
			{
				continue;
			}
			if (SchemaName == TEXT("55a4f32faca22e191098f3d9") || SchemaName == TEXT("ProjectSettings"))
			{
				VisitedSchemas.Add(TEXT("55a4f32faca22e191098f3d9"));
				VisitedSchemas.Add(TEXT("ProjectSettings"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("55a4f32faca22e191098f3d9"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("ProjectSettings"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("55a4f32faca22e191098f3d9"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("ProjectSettings"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("URpgGameDataProjectSettings"), false);
					MergedCollections->SetField(TEXT("ProjectSettings"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("ProjectSettings"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("ProjectSettings"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5b0a730bb84165c06b547") || SchemaName == TEXT("Parameter"))
			{
				VisitedSchemas.Add(TEXT("59f5b0a730bb84165c06b547"));
				VisitedSchemas.Add(TEXT("Parameter"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5b0a730bb84165c06b547"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Parameter"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5b0a730bb84165c06b547"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Parameter"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UParameter"), false);
					MergedCollections->SetField(TEXT("Parameter"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Parameter"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Parameter"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5b11030bb84165c06b54e") || SchemaName == TEXT("ParameterValue"))
			{
				VisitedSchemas.Add(TEXT("59f5b11030bb84165c06b54e"));
				VisitedSchemas.Add(TEXT("ParameterValue"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5b11030bb84165c06b54e"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("ParameterValue"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5b11030bb84165c06b54e"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("ParameterValue"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UParameterValue"), false);
					MergedCollections->SetField(TEXT("ParameterValue"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("ParameterValue"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("ParameterValue"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5b1c830bb84165c06b556") || SchemaName == TEXT("Provision"))
			{
				VisitedSchemas.Add(TEXT("59f5b1c830bb84165c06b556"));
				VisitedSchemas.Add(TEXT("Provision"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5b1c830bb84165c06b556"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Provision"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5b1c830bb84165c06b556"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Provision"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UProvision"), false);
					MergedCollections->SetField(TEXT("Provision"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Provision"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Provision"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5b29330bb84165c06b55c") || SchemaName == TEXT("Hero"))
			{
				VisitedSchemas.Add(TEXT("59f5b29330bb84165c06b55c"));
				VisitedSchemas.Add(TEXT("Hero"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5b29330bb84165c06b55c"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Hero"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5b29330bb84165c06b55c"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Hero"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UHero"), false);
					MergedCollections->SetField(TEXT("Hero"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Hero"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Hero"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5b3f130bb84165c06b56b") || SchemaName == TEXT("Item"))
			{
				VisitedSchemas.Add(TEXT("59f5b3f130bb84165c06b56b"));
				VisitedSchemas.Add(TEXT("Item"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5b3f130bb84165c06b56b"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Item"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5b3f130bb84165c06b56b"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Item"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UItem"), false);
					MergedCollections->SetField(TEXT("Item"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Item"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Item"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5b57530bb84165c06b579") || SchemaName == TEXT("Location"))
			{
				VisitedSchemas.Add(TEXT("59f5b57530bb84165c06b579"));
				VisitedSchemas.Add(TEXT("Location"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5b57530bb84165c06b579"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Location"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5b57530bb84165c06b579"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Location"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("ULocation"), false);
					MergedCollections->SetField(TEXT("Location"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Location"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Location"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5b61630bb84165c06b57f") || SchemaName == TEXT("Trinket"))
			{
				VisitedSchemas.Add(TEXT("59f5b61630bb84165c06b57f"));
				VisitedSchemas.Add(TEXT("Trinket"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5b61630bb84165c06b57f"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Trinket"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5b61630bb84165c06b57f"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Trinket"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UTrinket"), false);
					MergedCollections->SetField(TEXT("Trinket"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Trinket"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Trinket"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5b7f330bb84165c06b58a") || SchemaName == TEXT("Monster"))
			{
				VisitedSchemas.Add(TEXT("59f5b7f330bb84165c06b58a"));
				VisitedSchemas.Add(TEXT("Monster"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5b7f330bb84165c06b58a"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Monster"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5b7f330bb84165c06b58a"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Monster"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UMonster"), false);
					MergedCollections->SetField(TEXT("Monster"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Monster"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Monster"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5b9dd30bb84165c06b59a") || SchemaName == TEXT("Loot"))
			{
				VisitedSchemas.Add(TEXT("59f5b9dd30bb84165c06b59a"));
				VisitedSchemas.Add(TEXT("Loot"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5b9dd30bb84165c06b59a"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Loot"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5b9dd30bb84165c06b59a"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Loot"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("ULoot"), false);
					MergedCollections->SetField(TEXT("Loot"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Loot"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Loot"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5baaa30bb84165c06b5a0") || SchemaName == TEXT("CombatEffect"))
			{
				VisitedSchemas.Add(TEXT("59f5baaa30bb84165c06b5a0"));
				VisitedSchemas.Add(TEXT("CombatEffect"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5baaa30bb84165c06b5a0"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("CombatEffect"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5baaa30bb84165c06b5a0"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("CombatEffect"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UCombatEffect"), false);
					MergedCollections->SetField(TEXT("CombatEffect"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("CombatEffect"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("CombatEffect"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5bac130bb84165c06b5a4") || SchemaName == TEXT("CurioCleansingOption"))
			{
				VisitedSchemas.Add(TEXT("59f5bac130bb84165c06b5a4"));
				VisitedSchemas.Add(TEXT("CurioCleansingOption"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5bac130bb84165c06b5a4"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("CurioCleansingOption"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5bac130bb84165c06b5a4"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("CurioCleansingOption"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UCurioCleansingOption"), false);
					MergedCollections->SetField(TEXT("CurioCleansingOption"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("CurioCleansingOption"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("CurioCleansingOption"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5bbc230bb84165c06b5ae") || SchemaName == TEXT("Curio"))
			{
				VisitedSchemas.Add(TEXT("59f5bbc230bb84165c06b5ae"));
				VisitedSchemas.Add(TEXT("Curio"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5bbc230bb84165c06b5ae"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Curio"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5bbc230bb84165c06b5ae"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Curio"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UCurio"), false);
					MergedCollections->SetField(TEXT("Curio"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Curio"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Curio"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5d3a7983a361970003662") || SchemaName == TEXT("Disease"))
			{
				VisitedSchemas.Add(TEXT("59f5d3a7983a361970003662"));
				VisitedSchemas.Add(TEXT("Disease"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5d3a7983a361970003662"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Disease"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5d3a7983a361970003662"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Disease"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UDisease"), false);
					MergedCollections->SetField(TEXT("Disease"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Disease"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Disease"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5d728983a361970003684") || SchemaName == TEXT("Quirk"))
			{
				VisitedSchemas.Add(TEXT("59f5d728983a361970003684"));
				VisitedSchemas.Add(TEXT("Quirk"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5d728983a361970003684"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Quirk"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5d728983a361970003684"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Quirk"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UQuirk"), false);
					MergedCollections->SetField(TEXT("Quirk"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Quirk"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Quirk"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f5dedf983a361970003697") || SchemaName == TEXT("Conditions"))
			{
				VisitedSchemas.Add(TEXT("59f5dedf983a361970003697"));
				VisitedSchemas.Add(TEXT("Conditions"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f5dedf983a361970003697"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Conditions"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f5dedf983a361970003697"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Conditions"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UCondition"), false);
					MergedCollections->SetField(TEXT("Conditions"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Conditions"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Conditions"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f9e745983a364298db5e22") || SchemaName == TEXT("Weapon"))
			{
				VisitedSchemas.Add(TEXT("59f9e745983a364298db5e22"));
				VisitedSchemas.Add(TEXT("Weapon"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f9e745983a364298db5e22"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Weapon"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f9e745983a364298db5e22"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Weapon"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UWeapon"), false);
					MergedCollections->SetField(TEXT("Weapon"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Weapon"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Weapon"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("59f9e7b6983a364298db5e2c") || SchemaName == TEXT("Armor"))
			{
				VisitedSchemas.Add(TEXT("59f9e7b6983a364298db5e2c"));
				VisitedSchemas.Add(TEXT("Armor"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("59f9e7b6983a364298db5e2c"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("Armor"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("59f9e7b6983a364298db5e2c"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("Armor"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UArmor"), false);
					MergedCollections->SetField(TEXT("Armor"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Armor"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("Armor"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("5a1d78d107ff9a7b889cba7d") || SchemaName == TEXT("ItemWithCount"))
			{
				VisitedSchemas.Add(TEXT("5a1d78d107ff9a7b889cba7d"));
				VisitedSchemas.Add(TEXT("ItemWithCount"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("5a1d78d107ff9a7b889cba7d"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("ItemWithCount"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("5a1d78d107ff9a7b889cba7d"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("ItemWithCount"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UItemWithCount"), false);
					MergedCollections->SetField(TEXT("ItemWithCount"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("ItemWithCount"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("ItemWithCount"), *PatchDocumentCollection);
				}
			}
			else
			if (SchemaName == TEXT("5a1d78de07ff9a7b889cba83") || SchemaName == TEXT("StartingSet"))
			{
				VisitedSchemas.Add(TEXT("5a1d78de07ff9a7b889cba83"));
				VisitedSchemas.Add(TEXT("StartingSet"));

				auto GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("5a1d78de07ff9a7b889cba83"));
				if (GameDataDocumentCollection == nullptr)
				{
					GameDataDocumentCollection = GameDataCollectionsMap.Find(TEXT("StartingSet"));
				}
				auto PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("5a1d78de07ff9a7b889cba83"));
				if (PatchDocumentCollection == nullptr)
				{
					PatchDocumentCollection = PatchCollectionsMap.Find(TEXT("StartingSet"));
				}

				if (GameDataDocumentCollection != nullptr && PatchDocumentCollection != nullptr)
				{
					auto MergedCollection = MergeDocumentCollection(GameDataDocumentCollection->ToSharedRef(), PatchDocumentCollection->ToSharedRef(), TEXT("UStartingSet"), false);
					MergedCollections->SetField(TEXT("StartingSet"), MergedCollection);
				}
				else if (GameDataDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("StartingSet"), *GameDataDocumentCollection);
				}
				else if (PatchDocumentCollection != nullptr)
				{
					MergedCollections->SetField(TEXT("StartingSet"), *PatchDocumentCollection);
				}
			}
			else
			{
				/* ignore schema */
			}
		}
	}
	else if (GameDataCollections != nullptr && GameDataCollections->IsValid())
	{
		MergedCollections = GameDataCollections->ToSharedRef();
	}
	else if (PatchCollections != nullptr && PatchCollections->IsValid())
	{
		MergedCollections = PatchCollections->ToSharedRef();
	}

	int MergedChangeNumber;
	if (GameDataDocument->HasTypedField<EJson::Number>(TEXT("ChangeNumber")))
	{
		GameDataDocument->GetField<EJson::Number>(TEXT("ChangeNumber"))->TryGetNumber(MergedChangeNumber);
	}
	if (PatchDocument->HasTypedField<EJson::Number>(TEXT("ChangeNumber")))
	{
		PatchDocument->GetField<EJson::Number>(TEXT("ChangeNumber"))->TryGetNumber(MergedChangeNumber);
	}

	FString MergedRevisionHash;
	if (GameDataDocument->HasTypedField<EJson::String>(TEXT("RevisionHash")))
	{
		GameDataDocument->GetField<EJson::String>(TEXT("RevisionHash"))->TryGetString(MergedRevisionHash);
	}
	if (PatchDocument->HasTypedField<EJson::String>(TEXT("RevisionHash")))
	{
		PatchDocument->GetField<EJson::String>(TEXT("RevisionHash"))->TryGetString(MergedRevisionHash);
	}

	auto MergedGameData = MakeShared<FJsonObject>();
	MergedGameData->SetField(TEXT("ChangeNumber"), MakeShared<FJsonValueNumber>(MergedChangeNumber));
	MergedGameData->SetField(TEXT("RevisionHash"), MakeShared<FJsonValueString>(MergedRevisionHash));
	MergedGameData->SetField(TEXT("Collections"), MakeShared<FJsonValueObject>(MergedCollections));
	return MergedGameData;
}

TSharedPtr<FJsonValue> URpgGameData::MergeDocumentCollection(TSharedRef<FJsonValue> OriginalCollection, TSharedRef<FJsonValue> ModifiedCollection, const FString TypeName, bool PurgeRest)
{
	struct ToIdMapper
	{
		static TSharedPtr<FJsonObject> ToDocumentById(TSharedRef<FJsonValue> Collection)
		{
			TSharedPtr<FJsonObject>* CollectionByIdPtr;
			TArray<TSharedPtr<FJsonValue>>* CollectionPtr;
			if (Collection->TryGetObject(CollectionByIdPtr) && CollectionByIdPtr != nullptr && CollectionByIdPtr->IsValid())
			{
				return *CollectionByIdPtr;
			}
			else if (Collection->TryGetArray(CollectionPtr) && CollectionPtr != nullptr)
			{
				auto CollectionById = MakeShared<FJsonObject>();
				for (auto DocumentOrNullPtr : *CollectionPtr)
				{
					TSharedPtr<FJsonObject>* DocumentObjectPtr;
					if (DocumentOrNullPtr->TryGetObject(DocumentObjectPtr) && DocumentObjectPtr->IsValid())
					{
						auto Document = DocumentObjectPtr->ToSharedRef();
						auto IdValue = Document->TryGetField(TEXT("Id"));
						double IdValueDouble;
						FString IdValueString;
						bool IdValueBool;
						if (IdValue != nullptr && IdValue->TryGetNumber(IdValueDouble))
						{
							CollectionById->SetObjectField(FString::Format(TEXT("{0}"), {IdValueDouble}), Document);
						}
						else if (IdValue != nullptr && IdValue->TryGetString(IdValueString))
						{
							CollectionById->SetObjectField(IdValueString, Document);
						}
						else if (IdValue != nullptr && IdValue->TryGetBool(IdValueBool))
						{
							CollectionById->SetObjectField(IdValueBool ? TEXT("True") : TEXT("False"), Document);
						}
					}
				}
				return CollectionById;
			}
			else
			{
				return MakeShared<FJsonObject>();
			}
		}
	};

	auto OriginalCollectionById = ToIdMapper::ToDocumentById(OriginalCollection);
	auto ModifiedCollectionById = ToIdMapper::ToDocumentById(ModifiedCollection);
	auto MergedCollectionById = MakeShared<FJsonObject>();
	auto DocumentIds = PurgeRest ? MergeKeys(ModifiedCollectionById->Values, TMap<FString, TSharedPtr<FJsonValue>>()) : MergeKeys(OriginalCollectionById->Values, ModifiedCollectionById->Values);

	for (auto DocumentId : DocumentIds.Get())
	{
		TSharedPtr<FJsonValue> OriginalDocumentObjectPtr = OriginalCollectionById->TryGetField(DocumentId);
		auto OriginalDocumentExists = OriginalDocumentObjectPtr.IsValid();

		TSharedPtr<FJsonValue> ModifiedDocumentObjectPtr = ModifiedCollectionById->TryGetField(DocumentId);
		auto ModifiedDocumentExists = ModifiedDocumentObjectPtr.IsValid();

		TSharedPtr<FJsonValue> MergedDocument = nullptr;
		if (OriginalDocumentExists && !ModifiedDocumentExists)
		{
			// unchanged
			MergedDocument = OriginalDocumentObjectPtr;
		}
		else if (OriginalDocumentExists && OriginalCollectionById->HasTypedField<EJson::Null>(DocumentId))
		{
			// keep deleted documents as deleted
			MergedDocument = nullptr;
		}
		else if (!OriginalDocumentExists && ModifiedDocumentExists)
		{
			// modified
			MergedDocument = ModifiedDocumentObjectPtr;
		}
		else if (OriginalDocumentExists && OriginalCollectionById->HasTypedField<EJson::Object>(DocumentId) &&
			ModifiedDocumentExists && ModifiedCollectionById->HasTypedField<EJson::Object>(DocumentId))
		{
			// merged
			MergedDocument = MergeDocument(OriginalDocumentObjectPtr.ToSharedRef(), ModifiedDocumentObjectPtr.ToSharedRef(), TypeName);
		}
		else
		{
			// modified
			MergedDocument = ModifiedDocumentObjectPtr;
		}


		if (MergedDocument)
		{
			MergedCollectionById->SetField(DocumentId, MergedDocument);
		}
		else
		{
			MergedCollectionById->SetField(DocumentId, MakeShared<FJsonValueNull>());
		}
	}

	return MakeShared<FJsonValueObject>(MergedCollectionById);
}

TSharedPtr<FJsonValue> URpgGameData::MergeDocument(TSharedRef<FJsonValue> OriginalDocument, TSharedRef<FJsonValue> ModifiedDocument, const FString& TypeName)
{
	TSharedPtr<FJsonObject>* OriginalDocumentObjectPtr;
	if (!OriginalDocument->TryGetObject(OriginalDocumentObjectPtr))
	{
		OriginalDocumentObjectPtr = nullptr;
	}

	TSharedPtr<FJsonObject>* ModifiedDocumentObjectPtr;
	if (!ModifiedDocument->TryGetObject(ModifiedDocumentObjectPtr))
	{
		ModifiedDocumentObjectPtr = nullptr;
	}

	if (OriginalDocumentObjectPtr == nullptr || !OriginalDocumentObjectPtr->IsValid() ||
		ModifiedDocumentObjectPtr == nullptr || !ModifiedDocumentObjectPtr->IsValid())
	{
		return nullptr;
	}

	auto ModifiedDocumentObjectRef = ModifiedDocumentObjectPtr->ToSharedRef();
	auto OriginalDocumentObjectRef = OriginalDocumentObjectPtr->ToSharedRef();
	auto MergedDocument = MakeShared<FJsonObject>();
	if (TypeName == TEXT("URpgGameDataProjectSettings"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Name"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("PrimaryLanguage"));
		MergePropertyLanguagesValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Languages"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Copyright"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Version"));
	}
	else
	if (TypeName == TEXT("UParameter"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("MinValue"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("MaxValue"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("MinValueParameter"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("MaxValueParameter"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("ValueKind"));
	}
	else
	if (TypeName == TEXT("UParameterValue"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Parameter"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Value"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Condition"));
	}
	else
	if (TypeName == TEXT("UProvision"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Cost"));
		MergePropertyDocumentValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Item"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocument(OriginalValue, ModifiedValue, TEXT("UItem")); }));
	}
	else
	if (TypeName == TEXT("UHero"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Name"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Bio"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Religious"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("DislikeHeroes"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UHero"), true); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Provisions"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("ProvisionsCount"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("MovementForward"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("MovementBackward"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Protection"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("AccuracyModifier"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("StunResistance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("BlightResistance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("DiseaseResistance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("DeathBlowResistance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("MoveResistance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("BleedResistance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("DebuffResistance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("TrapResistance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Armors"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UArmor"), true); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Weapons"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UWeapon"), true); }));
	}
	else
	if (TypeName == TEXT("UItem"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Name"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Description"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("StackSize"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("GoldValue"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("ActivationEffects"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UParameterValue"), true); }));
	}
	else
	if (TypeName == TEXT("ULocation"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Name"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Flags"));
	}
	else
	if (TypeName == TEXT("UTrinket"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Rarity"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("OriginDungeon"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("HeroRestriction"));
		MergePropertyDocumentValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Item"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocument(OriginalValue, ModifiedValue, TEXT("UItem")); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Effects"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UParameterValue"), true); }));
	}
	else
	if (TypeName == TEXT("UMonster"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Name"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Type"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("SecondType"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Parameters"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UParameterValue"), true); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Locations"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("ULocation"), true); }));
	}
	else
	if (TypeName == TEXT("ULoot"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Type"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Amount"));
	}
	else
	if (TypeName == TEXT("UCombatEffect"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Changes"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UParameterValue"), true); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Duration"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("DurationUnit"));
	}
	else
	if (TypeName == TEXT("UCurioCleansingOption"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Chance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Item"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Loot"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("ULoot"), true); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("QuirkChance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("DiseaseChance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Effects"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UParameterValue"), true); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("ItemIsConsumed"));
	}
	else
	if (TypeName == TEXT("UCurio"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Type"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Name"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Description"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("CleansingOptions"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UCurioCleansingOption"), true); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("PlacementRestictions"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Locations"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("ULocation"), true); }));
	}
	else
	if (TypeName == TEXT("UDisease"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Name"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Effects"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UParameterValue"), true); }));
	}
	else
	if (TypeName == TEXT("UQuirk"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Name"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("IsPositive"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Effects"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UParameterValue"), true); }));
	}
	else
	if (TypeName == TEXT("UCondition"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Description"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Check"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("UnboundCheck"));
	}
	else
	if (TypeName == TEXT("UWeapon"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Name"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("DamageFrom"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("DamageTo"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("CriticalStrikeChance"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Speed"));
	}
	else
	if (TypeName == TEXT("UArmor"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Name"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeLocalizedText(OriginalValue, ModifiedValue); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Dodge"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("HitPoints"));
	}
	else
	if (TypeName == TEXT("UItemWithCount"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Item"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Count"));
	}
	else
	if (TypeName == TEXT("UStartingSet"))
	{
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Id"));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Items"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UItemWithCount"), true); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Heroes"), OptionalMergeValueFunc([this](TSharedRef<FJsonValue> OriginalValue, TSharedRef<FJsonValue> ModifiedValue) { return MergeDocumentCollection(OriginalValue, ModifiedValue, TEXT("UHero"), true); }));
		MergePropertyValue(MergedDocument, OriginalDocumentObjectRef, ModifiedDocumentObjectRef, TEXT("Location"));
	}
	else
	{
		/* ignore type */
	}

	return MakeShared<FJsonValueObject>(MergedDocument);
}


void URpgGameData::MergePropertyDocumentValue(TSharedRef<FJsonObject> MergedDocument, TSharedRef<FJsonObject> OriginalDocument, TSharedRef<FJsonObject> ModifiedDocument, const FString PropertyName, OptionalMergeValueFunc MergeFn)
{
	const TSharedPtr<FJsonObject>* ModifiedDocumentObjectPtr;
	if (ModifiedDocument->TryGetObjectField(PropertyName, ModifiedDocumentObjectPtr) &&
		ModifiedDocumentObjectPtr != nullptr && ModifiedDocumentObjectPtr->IsValid() &&
		!ModifiedDocumentObjectPtr->Get()->HasField(TEXT("Id")) &&
		OriginalDocument->HasTypedField<EJson::Null>(PropertyName))
	{
		// unable to merge partial data into missing document
		MergedDocument->SetField(PropertyName, MakeShared<FJsonValueNull>());
		return;
	}

	MergePropertyValue(MergedDocument, OriginalDocument, ModifiedDocument, PropertyName, MergeFn);
}

void URpgGameData::MergePropertyLanguagesValue(TSharedRef<FJsonObject> MergedDocument, TSharedRef<FJsonObject> OriginalDocument, TSharedRef<FJsonObject> ModifiedDocument, const FString PropertyName)
{
	auto OriginalValue = OriginalDocument->TryGetField(PropertyName);
	auto OriginalValueExists = OriginalValue.IsValid();

	auto ModifiedValue = ModifiedDocument->TryGetField(PropertyName);
	auto ModifiedValueExists = ModifiedValue.IsValid();

	if (!OriginalValueExists && !ModifiedValueExists)
	{
		return;
	}

	auto OriginalLanguageListStr = OriginalValueExists && OriginalValue->Type == EJson::String ? OriginalValue->AsString() : FString();
	auto ModifiedLanguageListStr = ModifiedValueExists && ModifiedValue->Type == EJson::String ? ModifiedValue->AsString() : FString();
	auto OriginalLanguageList = TArray<FString>();
	auto ModifiedLanguageList = TArray<FString>();

	ParseLanguageList(OriginalLanguageListStr, OriginalLanguageList);
	ParseLanguageList(ModifiedLanguageListStr, ModifiedLanguageList);

	for (const auto LanguageId : ModifiedLanguageList)
	{
		if (OriginalLanguageList.Contains(LanguageId))
		{
			continue;
		}
		OriginalLanguageList.Add(LanguageId);
	}

	MergedDocument->SetStringField(PropertyName, FString::Join(OriginalLanguageList, TEXT(";")));
}

void URpgGameData::MergePropertyValue(TSharedRef<FJsonObject> MergedDocument, TSharedRef<FJsonObject> OriginalDocument, TSharedRef<FJsonObject> ModifiedDocument, const FString PropertyName, OptionalMergeValueFunc MergeFn)
{
	auto OriginalValue = OriginalDocument->TryGetField(PropertyName);
	auto OriginalValueExists = OriginalValue.IsValid();

	auto ModifiedValue = ModifiedDocument->TryGetField(PropertyName);
	auto ModifiedValueExists = ModifiedValue.IsValid();

	if (!OriginalValueExists && !ModifiedValueExists)
	{
		return;
	}

	TSharedPtr<FJsonValue> MergedValue = nullptr;
	if (OriginalValueExists && !ModifiedValueExists)
	{
		// unchanged
		MergedValue = OriginalValue;
	}
	else if (!OriginalValueExists && ModifiedValueExists)
	{
		// modified
		MergedValue = ModifiedValue;
	}
	else if (OriginalValue != nullptr && ModifiedValue != nullptr)
	{
		// modified
		if (MergeFn.IsSet())
		{
			MergedValue = MergeFn.GetValue()(OriginalValue.ToSharedRef(), ModifiedValue.ToSharedRef());
		}
		else
		{
			MergedValue = ModifiedValue;
		}
	}
	else
	{
		// modified
		MergedValue = ModifiedValue;
	}


	if (MergedValue != nullptr)
	{
		MergedDocument->SetField(PropertyName, MergedValue);
	}
	else
	{
		MergedDocument->SetField(PropertyName, MakeShared<FJsonValueNull>());
	}
}

TSharedRef<FJsonValue> URpgGameData::MergeLocalizedText(TSharedRef<FJsonValue> OriginalLocalizedText, TSharedRef<FJsonValue> ModifiedLocalizedText)
{
	struct TextComparer
	{
		static bool IsSame(TSharedRef<FJsonObject> Left, TSharedRef<FJsonObject> Right)
		{
			TArray<FString> Keys;
			for(int i = 0; i < 2; i++)
			{
				if (i == 0)
				{
					Left->Values.GetKeys(Keys);
				}
				else
				{
					Right->Values.GetKeys(Keys);
				}

				for (auto LanguageId : Keys)
				{
					if(LanguageId == TEXT("notes"))
					{
						continue;;
					}

					auto LeftValue = Left->TryGetField(LanguageId);
					auto RightValue = Right->TryGetField(LanguageId);
					FString LeftText, RightText;

					if (LeftValue == nullptr || RightValue == nullptr || LeftValue->Type != RightValue->Type)
					{
						return false;
					}

					if (LeftValue->TryGetString(LeftText) &&
						RightValue->TryGetString(RightText) &&
						LeftText != RightText)
					{
						return false;
					}

				}
			}

			return true;
		}
	};

	TSharedPtr<FJsonObject>* OriginalLocalizedTextPtr;
	if (!OriginalLocalizedText->TryGetObject(OriginalLocalizedTextPtr))
	{
		OriginalLocalizedTextPtr = nullptr;
	}

	TSharedPtr<FJsonObject>* ModifiedLocalizedTextPtr;
	if (!ModifiedLocalizedText->TryGetObject(ModifiedLocalizedTextPtr))
	{
		ModifiedLocalizedTextPtr = nullptr;
	}

	if (OriginalLocalizedTextPtr == nullptr || !OriginalLocalizedTextPtr->IsValid())
	{
		return ModifiedLocalizedTextPtr != nullptr && ModifiedLocalizedTextPtr->IsValid() ?
			MakeShared<FJsonValueObject>(*ModifiedLocalizedTextPtr) : static_cast<TSharedRef<FJsonValue>>(MakeShared<FJsonValueNull>());
	}
	else if (ModifiedLocalizedTextPtr == nullptr || !ModifiedLocalizedTextPtr->IsValid())
	{
		return OriginalLocalizedTextPtr != nullptr && OriginalLocalizedTextPtr->IsValid() ?
			MakeShared<FJsonValueObject>(*OriginalLocalizedTextPtr) : static_cast<TSharedRef<FJsonValue>>(MakeShared<FJsonValueNull>());
	}
	else if (TextComparer::IsSame(OriginalLocalizedTextPtr->ToSharedRef(), ModifiedLocalizedTextPtr->ToSharedRef()))
	{
		return MakeShared<FJsonValueObject>(*OriginalLocalizedTextPtr);
	}

	auto& OriginalLocalizedTextMap = OriginalLocalizedTextPtr->Get()->Values;
	auto& ModifiedLocalizedTextMap = ModifiedLocalizedTextPtr->Get()->Values;
	auto LanguageIds = MergeKeys(OriginalLocalizedTextMap, ModifiedLocalizedTextMap);
	auto MergedLocalizedText = MakeShared<FJsonObject>();
	for (auto LanguageId : LanguageIds.Get())
	{
		auto OriginalText = OriginalLocalizedTextMap.Find(LanguageId);
		auto ModifiedText = ModifiedLocalizedTextMap.Find(LanguageId);

		if (ModifiedText != nullptr && ModifiedText->IsValid())
		{
			MergedLocalizedText->SetField(LanguageId, *ModifiedText);
		}
		else if (OriginalText != nullptr && OriginalText->IsValid())
		{
			MergedLocalizedText->SetField(LanguageId, *OriginalText);
		}
	}

	return MakeShared<FJsonValueObject>(MergedLocalizedText);
}

TSharedRef<TArray<FString>> URpgGameData::MergeKeys(const TMap<FString, TSharedPtr<FJsonValue>>& Collection1, const TMap<FString, TSharedPtr<FJsonValue>>& Collection2)
{
	TArray<FString> Keys;
	Collection1.GetKeys(Keys);

	auto MergedKeys = MakeShared<TArray<FString>>();
	for (auto Key : Keys)
	{
		MergedKeys->Push(Key);
	}

	Collection2.GetKeys(Keys);
	for (auto Key : Keys)
	{
		if (MergedKeys->Contains(Key))
		{
			continue; // skip duplicates
		}
		MergedKeys->Push(Key);
	}
	return MergedKeys;
}
void URpgGameData::ApplyVisitor(FVisitor& Visitor) const
{
	for (const auto Document : GetRootDocuments())
	{
		Visitor.Visit(Document);
	}
}

void URpgGameData::ResolveAllReferences()
{
	auto DereferencingVisitor = URpgGameData::FDereferencingVisitor();
	ApplyVisitor(DereferencingVisitor);
}

void URpgGameData::FindAllDocuments()
{
	auto FindingVisitor = URpgGameData::FFindingVisitor();
	ApplyVisitor(FindingVisitor);
		ToMapById(this->AllProjectSettingsList, FindingVisitor.ProjectSettings);
		ToMapById(this->AllParameters, FindingVisitor.Parameter);
		ToMapById(this->AllParameterValues, FindingVisitor.ParameterValue);
		ToMapById(this->AllProvisions, FindingVisitor.Provision);
		ToMapById(this->AllHeros, FindingVisitor.Hero);
		ToMapById(this->AllItems, FindingVisitor.Item);
		ToMapById(this->AllLocations, FindingVisitor.Location);
		ToMapById(this->AllTrinkets, FindingVisitor.Trinket);
		ToMapById(this->AllMonsters, FindingVisitor.Monster);
		ToMapById(this->AllLoots, FindingVisitor.Loot);
		ToMapById(this->AllCombatEffects, FindingVisitor.CombatEffect);
		ToMapById(this->AllCurioCleansingOptions, FindingVisitor.CurioCleansingOption);
		ToMapById(this->AllCurios, FindingVisitor.Curio);
		ToMapById(this->AllDiseases, FindingVisitor.Disease);
		ToMapById(this->AllQuirks, FindingVisitor.Quirk);
		ToMapById(this->AllConditionsList, FindingVisitor.Conditions);
		ToMapById(this->AllWeapons, FindingVisitor.Weapon);
		ToMapById(this->AllArmors, FindingVisitor.Armor);
		ToMapById(this->AllItemWithCounts, FindingVisitor.ItemWithCount);
		ToMapById(this->AllStartingSets, FindingVisitor.StartingSet);
}

void URpgGameData::FVisitor::Visit(UGameDataDocument* Document)
{
	if (Document == nullptr)
	{
		return;
	}
	else if ((Document->GetClass() == URpgGameDataProjectSettings::StaticClass()))
	{
		Visit(static_cast<URpgGameDataProjectSettings&>(*Document));
	}
	else if ((Document->GetClass() == UParameter::StaticClass()))
	{
		Visit(static_cast<UParameter&>(*Document));
	}
	else if ((Document->GetClass() == UParameterValue::StaticClass()))
	{
		Visit(static_cast<UParameterValue&>(*Document));
	}
	else if ((Document->GetClass() == UProvision::StaticClass()))
	{
		Visit(static_cast<UProvision&>(*Document));
	}
	else if ((Document->GetClass() == UHero::StaticClass()))
	{
		Visit(static_cast<UHero&>(*Document));
	}
	else if ((Document->GetClass() == UItem::StaticClass()))
	{
		Visit(static_cast<UItem&>(*Document));
	}
	else if ((Document->GetClass() == ULocation::StaticClass()))
	{
		Visit(static_cast<ULocation&>(*Document));
	}
	else if ((Document->GetClass() == UTrinket::StaticClass()))
	{
		Visit(static_cast<UTrinket&>(*Document));
	}
	else if ((Document->GetClass() == UMonster::StaticClass()))
	{
		Visit(static_cast<UMonster&>(*Document));
	}
	else if ((Document->GetClass() == ULoot::StaticClass()))
	{
		Visit(static_cast<ULoot&>(*Document));
	}
	else if ((Document->GetClass() == UCombatEffect::StaticClass()))
	{
		Visit(static_cast<UCombatEffect&>(*Document));
	}
	else if ((Document->GetClass() == UCurioCleansingOption::StaticClass()))
	{
		Visit(static_cast<UCurioCleansingOption&>(*Document));
	}
	else if ((Document->GetClass() == UCurio::StaticClass()))
	{
		Visit(static_cast<UCurio&>(*Document));
	}
	else if ((Document->GetClass() == UDisease::StaticClass()))
	{
		Visit(static_cast<UDisease&>(*Document));
	}
	else if ((Document->GetClass() == UQuirk::StaticClass()))
	{
		Visit(static_cast<UQuirk&>(*Document));
	}
	else if ((Document->GetClass() == UCondition::StaticClass()))
	{
		Visit(static_cast<UCondition&>(*Document));
	}
	else if ((Document->GetClass() == UWeapon::StaticClass()))
	{
		Visit(static_cast<UWeapon&>(*Document));
	}
	else if ((Document->GetClass() == UArmor::StaticClass()))
	{
		Visit(static_cast<UArmor&>(*Document));
	}
	else if ((Document->GetClass() == UItemWithCount::StaticClass()))
	{
		Visit(static_cast<UItemWithCount&>(*Document));
	}
	else if ((Document->GetClass() == UStartingSet::StaticClass()))
	{
		Visit(static_cast<UStartingSet&>(*Document));
	}
}
void URpgGameData::FVisitor::Visit(URpgGameDataProjectSettings& Document)
{
}
void URpgGameData::FVisitor::Visit(UParameter& Document)
{
}
void URpgGameData::FVisitor::Visit(UParameterValue& Document)
{
}
void URpgGameData::FVisitor::Visit(UProvision& Document)
{
	if (Document.Item)
	{
		Visit (static_cast<UGameDataDocument*>(Document.Item));
	}
}
void URpgGameData::FVisitor::Visit(UHero& Document)
{
	for (const auto SubDocumentById : Document.Armors)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
	for (const auto SubDocumentById : Document.Weapons)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
}
void URpgGameData::FVisitor::Visit(UItem& Document)
{
	for (const auto SubDocumentById : Document.ActivationEffects)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
}
void URpgGameData::FVisitor::Visit(ULocation& Document)
{
}
void URpgGameData::FVisitor::Visit(UTrinket& Document)
{
	if (Document.Item)
	{
		Visit (static_cast<UGameDataDocument*>(Document.Item));
	}
	for (const auto SubDocumentById : Document.Effects)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
}
void URpgGameData::FVisitor::Visit(UMonster& Document)
{
	for (const auto SubDocumentById : Document.Parameters)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
}
void URpgGameData::FVisitor::Visit(ULoot& Document)
{
}
void URpgGameData::FVisitor::Visit(UCombatEffect& Document)
{
	for (const auto SubDocumentById : Document.Changes)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
}
void URpgGameData::FVisitor::Visit(UCurioCleansingOption& Document)
{
	for (const auto SubDocumentById : Document.Loot)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
	for (const auto SubDocumentById : Document.Effects)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
}
void URpgGameData::FVisitor::Visit(UCurio& Document)
{
	for (const auto SubDocumentById : Document.CleansingOptions)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
}
void URpgGameData::FVisitor::Visit(UDisease& Document)
{
	for (const auto SubDocumentById : Document.Effects)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
}
void URpgGameData::FVisitor::Visit(UQuirk& Document)
{
	for (const auto SubDocumentById : Document.Effects)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
}
void URpgGameData::FVisitor::Visit(UCondition& Document)
{
}
void URpgGameData::FVisitor::Visit(UWeapon& Document)
{
}
void URpgGameData::FVisitor::Visit(UArmor& Document)
{
}
void URpgGameData::FVisitor::Visit(UItemWithCount& Document)
{
}
void URpgGameData::FVisitor::Visit(UStartingSet& Document)
{
	for (const auto SubDocumentById : Document.Items)
	{
		if (SubDocumentById.Value == nullptr) { continue; }
		Visit(static_cast<UGameDataDocument*>(SubDocumentById.Value));
	}
}
void URpgGameData::FFindingVisitor::Visit(URpgGameDataProjectSettings& Document)
{
	if (this->ProjectSettings.Num() == 0)
	{
		this->ProjectSettings.Reserve(6);
	}
	this->ProjectSettings.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UParameter& Document)
{
	if (this->Parameter.Num() == 0)
	{
		this->Parameter.Reserve(44);
	}
	this->Parameter.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UParameterValue& Document)
{
	if (this->ParameterValue.Num() == 0)
	{
		this->ParameterValue.Reserve(83);
	}
	this->ParameterValue.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UProvision& Document)
{
	if (this->Provision.Num() == 0)
	{
		this->Provision.Reserve(15);
	}
	this->Provision.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UHero& Document)
{
	if (this->Hero.Num() == 0)
	{
		this->Hero.Reserve(8);
	}
	this->Hero.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UItem& Document)
{
	if (this->Item.Num() == 0)
	{
		this->Item.Reserve(44);
	}
	this->Item.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(ULocation& Document)
{
	if (this->Location.Num() == 0)
	{
		this->Location.Reserve(12);
	}
	this->Location.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UTrinket& Document)
{
	if (this->Trinket.Num() == 0)
	{
		this->Trinket.Reserve(11);
	}
	this->Trinket.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UMonster& Document)
{
	if (this->Monster.Num() == 0)
	{
		this->Monster.Reserve(11);
	}
	this->Monster.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(ULoot& Document)
{
	if (this->Loot.Num() == 0)
	{
		this->Loot.Reserve(17);
	}
	this->Loot.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UCombatEffect& Document)
{
	if (this->CombatEffect.Num() == 0)
	{
		this->CombatEffect.Reserve(50);
	}
	this->CombatEffect.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UCurioCleansingOption& Document)
{
	if (this->CurioCleansingOption.Num() == 0)
	{
		this->CurioCleansingOption.Reserve(19);
	}
	this->CurioCleansingOption.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UCurio& Document)
{
	if (this->Curio.Num() == 0)
	{
		this->Curio.Reserve(10);
	}
	this->Curio.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UDisease& Document)
{
	if (this->Disease.Num() == 0)
	{
		this->Disease.Reserve(11);
	}
	this->Disease.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UQuirk& Document)
{
	if (this->Quirk.Num() == 0)
	{
		this->Quirk.Reserve(13);
	}
	this->Quirk.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UCondition& Document)
{
	if (this->Conditions.Num() == 0)
	{
		this->Conditions.Reserve(23);
	}
	this->Conditions.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UWeapon& Document)
{
	if (this->Weapon.Num() == 0)
	{
		this->Weapon.Reserve(20);
	}
	this->Weapon.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UArmor& Document)
{
	if (this->Armor.Num() == 0)
	{
		this->Armor.Reserve(20);
	}
	this->Armor.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UItemWithCount& Document)
{
	if (this->ItemWithCount.Num() == 0)
	{
		this->ItemWithCount.Reserve(10);
	}
	this->ItemWithCount.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FFindingVisitor::Visit(UStartingSet& Document)
{
	if (this->StartingSet.Num() == 0)
	{
		this->StartingSet.Reserve(6);
	}
	this->StartingSet.Add(&Document);

	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(URpgGameDataProjectSettings& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UParameter& Document)
{
	if (Document.MinValueParameterRaw.IsValid())
	{ auto _ = Document.MinValueParameterRaw.GetReferencedDocument(); }
	if (Document.MaxValueParameterRaw.IsValid())
	{ auto _ = Document.MaxValueParameterRaw.GetReferencedDocument(); }
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UParameterValue& Document)
{
	if (Document.ParameterRaw.IsValid())
	{ auto _ = Document.ParameterRaw.GetReferencedDocument(); }
	if (Document.ConditionRaw.IsValid())
	{ auto _ = Document.ConditionRaw.GetReferencedDocument(); }
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UProvision& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UHero& Document)
{
	{ auto _ = Document.GetDislikeHeroes(); }
	if (Document.ProvisionsRaw.IsValid())
	{ auto _ = Document.ProvisionsRaw.GetReferencedDocument(); }
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UItem& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(ULocation& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UTrinket& Document)
{
	if (Document.OriginDungeonRaw.IsValid())
	{ auto _ = Document.OriginDungeonRaw.GetReferencedDocument(); }
	if (Document.HeroRestrictionRaw.IsValid())
	{ auto _ = Document.HeroRestrictionRaw.GetReferencedDocument(); }
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UMonster& Document)
{
	{ auto _ = Document.GetLocations(); }
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(ULoot& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UCombatEffect& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UCurioCleansingOption& Document)
{
	if (Document.ItemRaw.IsValid())
	{ auto _ = Document.ItemRaw.GetReferencedDocument(); }
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UCurio& Document)
{
	{ auto _ = Document.GetLocations(); }
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UDisease& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UQuirk& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UCondition& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UWeapon& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UArmor& Document)
{
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UItemWithCount& Document)
{
	if (Document.ItemRaw.IsValid())
	{ auto _ = Document.ItemRaw.GetReferencedDocument(); }
	FVisitor::Visit(Document);
}
void URpgGameData::FDereferencingVisitor::Visit(UStartingSet& Document)
{
	{ auto _ = Document.GetHeroes(); }
	if (Document.LocationRaw.IsValid())
	{ auto _ = Document.LocationRaw.GetReferencedDocument(); }
	FVisitor::Visit(Document);
}
